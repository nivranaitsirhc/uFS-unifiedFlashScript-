#!/sbin/sh
#
# aslib library
#

##### ASLIB.SUB.WIPE_SYSTEM_FILES
wipe_system_file() {
	$LT4 "D: ASLIB exec wipe_system_file"
	if [ -e "/system/$1" ]; then
		# determine type
		if [ -d "/system/$1" ]; then
			# delete recursively
			$LT3 "I: ASLIB wipe_system_file: WIPING FOLDER -> $1"
			rm -fR "/system/$1"
		elif [ -f "/system/$1" ]; then
			# delete file
			$LT3 "I: ASLIB wipe_system_file: WIPING FILE   -> $1"
			rm -f "/system/$1"
		fi
		# double checked if removed
		[ -e "/system/$1" ] && {
			$LT3 "I: ASLIB wipe_system_file: FAILED TO WIPE"
		}
	else
			$LT3 "I: ASLIB wipe_system_file: SKIPPING..... -> $1"
	fi
}

##### ASLIB.SUB.EXTRACT_ZIP
extract_zip() {
	$LT4 "D: ASLIB exec extract_zip"
	[[ -z "$1" || -z "$2" || -z "$3" ]] && {
		$LT1 "E: ASLIB extract_zip: Missing input!"
		$LT3 "D: ASLIB extract_zip: S1 -> $1"
		$LT3 "D: ASLIB extract_zip: S2 -> $2"
		$LT3 "D: ASLIB extract_zip: S3 -> $3"
		return 25
	}
	
	# Determine Zip Size
	[[ -z "$pc_size_zip" && -n "$ZIP" ]] && {
		$LT4 "D: ASLIB extract_zip: unknown zip size recalculating"
		pc_size_zip=$(du -ck $ZIP | tail -n 1 | awk '{ print $1 }') || \
		$LT4 "D: ASLIB extract_zip: fatal error cannot determine zip size"
	}
	
	est_time=$(($pc_size_zip/1000/10))
	
	$LT4 "D: ASLIB extract_zip: Zip Size -> $pc_size_zip"
	$LT4 "D: ASLIB extract_zip: Est Time -> $est_time"
	
	progress 1.34 $est_time;
	unzip -o "$1" "$2" -d "$3" || $LT2 "E: ASLIB extract_zip: errors during extraction"
	progress 1.34 1
	[ ! -e "$3" ] && {
		$LT1 "E: ASLIB extract_zip: unable to extract zip"
		return 1
	} || return 0
}

###### ASLIB.SUB.INSTALL_APP_LIB
install_app_lib(){
	# asInstall Sub
	$LT4 "D: ASLIB install_app_lib: Processing AppLib using $ABI, $LIB, $VENDORLIB"
	unzip -o "$TARGET" "lib/$ABI/*" -d "$TMPLIB" && {
		for SO in $(ls $TMPLIB/lib/$ABI); do
			TMP_SO="$TMPLIB/lib/$ABI/$SO";VEN_SO="$VENDORLIB/$SO";APP_SO="$SYSTEMPATH/lib/$LIB/$SO"
			if [ -e $VEN_SO ];then
				cmp -s "$TMPLIB/lib/$ABI/$SO" "$VENDORLIB/$SO" >/dev/null 2>&1 && {
					$LT4 "D: ASLIB install_app_lib: Linking in APP DIR, a same version exist in $VENDORLIB - $SO "
					install_LnkFile "$SYSTEMPATH/lib/$LIB/" "$SYSTEMPATH" "$VEN_SO" "$APP_SO"
					file_list "${VEN_SO#/system/}"
				} || {
					$LT4 "D: ASLIB install_app_lib: Installing in APP DIR, A different SO already exist in $VENDORLIB - $SO"
					install -d "$SYSTEMPATH/lib/$LIB/"
					dd if="$TMP_SO" of="$APP_SO"
					set_system_fp "$APP_SO";
					file_list "${APP_SO#/system/}"
				}
			else
				$LT4 "D: ASLIB install_app_lib: Installing in $VENDORLIB - $SO"
				dd if="$TMP_SO" of="$VEN_SO"
				set_system_fp "$VEN_SO";
				file_list "${VEN_SO#/system/}"
				$LT4 "D: ASLIB install_app_lib: Linking $SO to APP DIR."
				install_LnkFile "$SYSTEMPATH/lib/$LIB/" "$SYSTEMPATH" "$VEN_SO" "$APP_SO"
			fi
		done
		# Clean TMPLIB
		rm -rf $TMPLIB/*
	} || $LT3 "E: ASLIB install_app_lib: Error in extracting lib from $TARGET"
}

install_file(){
	# asInstall sub
	dd if="$TARGET" of="$FILE"
	[ ! -e "$FILE" ] && { $LT3 "E: ASLIB install_file: Failed to install $FILE"; } || {
		file_list "${FILE#/system/}"
		set_system_fp "$FILE";
	}
}

install_LnkFile() {
	[ ! -e "$1" ] && {
		install -d "$1"
		for L in $(find "$2" -type d);do
			set_perm 0 0 0755 "$L"
		done
	}
	ln -sfn "$3" "$4" &&\
	$LT4 "D: ASLIB install_LnkFile: LINKED FROM ${3#/system/} TO ${4#/system/}" ||\
	$LT3 "E: ASLIB install_LnkFile: FAILED TO LINK"
	eval echo "$3 $4"	>> $link_list
}

# Loaded Message
printf "script loaded\n"